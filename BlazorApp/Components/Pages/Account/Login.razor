@page "/login"
@using BlazorApp.Model
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Cryptography
@using System.Text
@inject BlazorApp.Data.MyDBContext DB
@inject NavigationManager NavManager

<h3>Login</h3>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="this" OnValidSubmit="Authenticate" FormName="LoginForm" Enhance>
            <DataAnnotationsValidator/>
            <div class="mt-3 text-center flex-column">
                <img src="/Img/login.png" style="max-height:5rem"/>
                <h3>Login</h3>
            </div>

            <div class="mb-3">
                <label>Felhasználó név:</label>
                <InputText @bind-Value="newUser.UserName" class="form-control" placeholder="Username"/>
                <ValidationMessage For="()=>newUser.UserName"/>
            </div>

            <div class="mb-3">
                <label>Jelszó:</label>
                <InputText @bind-Value="newUser.Password" type="password" class="form-control" placeholder="Password" />
                <ValidationMessage For="()=>newUser.Password" />
            </div>

            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>

            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    private User newUser { get; set; } = new();

    private string errorMessage = string.Empty;

    

    private async Task Authenticate()
    {
        //kiszűrjük az első felhasználót a DB-ből
        var userAccount = DB.users.FirstOrDefault(u => u.UserName == newUser.UserName);

        //Hash password
        if (!string.IsNullOrWhiteSpace(newUser.Password))
        {
            newUser.Password = BitConverter.ToString(SHA512.HashData(Encoding.Default.GetBytes(newUser.Password))).Replace("-", "");
        }

        //ellenőrizzük a usert és a password-öt
        if (userAccount is null || userAccount.Password != newUser.Password)
        {
            newUser.UserName = string.Empty;
            newUser.Password = string.Empty;
            errorMessage = "A felhasználó név és a jelszó nem egyezik!";
            return;
        }

        //Claim használata .Net keretrendszer System.Security.Claims
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, newUser.UserName),
            new Claim(ClaimTypes.Role, userAccount.Role)
        };

        //igényazonosíto (ClaimsIdentity) obj elkészítése
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

        //követési megbízás elkészítése
        var principal = new ClaimsPrincipal(identity);

        //és a bejelentkezés:
        await HttpContext.SignInAsync(principal);
        NavManager.NavigateTo("/");
    }
}
